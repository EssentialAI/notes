Traceback (most recent call last):
  File "C:\Users\nares\anaconda3\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\nares\anaconda3\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\Users\nares\anaconda3\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

class BernoulliBandit(object):
    def __init__(self, p):
        self.p = p
    
    def display_ad(self):
        reward = np.random.binomial(n=1, p=self.p)
        return reward
    
bandit_probs = [0.04, 0.016, 0.02, 0.028, 0.031] #These probabilities represent the reward distribution per each bandit (ad here).

ads = [BernoulliBandit(i) for i in bandit_probs]

n_trails = 10000
n_ads = len(ads)
epsilons = [0.1, 0.01, 0.03]


for epsilon in epsilons:
    n_optimal_pulls = 0
    n_explored = 0
    n_exploited = 0
    Q = np.zeros(n_ads)  # Q, action values
    N = np.zeros(n_ads)  # N, total impressions
    total_reward = 0
    avg_rewards = []  # Save average rewards over time

    for i in range(n_trails):
        p = np.random.random()
        if p < epsilon:
            n_explored+=1
            ad_chosen = np.random.randint(n_ads)
        else:
            ad_chosen = np.argmax(Q)
            n_exploited+=1
        
        if ad_chosen == np.argmax(bandit_probs):
                n_optimal_pulls +=1

        R = ads[ad_chosen].display_ad()  # Observe reward
        N[ad_chosen] += 1
        Q[ad_chosen] += (1 / N[ad_chosen]) * (R - Q[ad_chosen])
        total_reward += R
        avg_reward_so_far = total_reward / (i + 1)
        avg_rewards.append(avg_reward_so_far)

    best_ad_index = np.argmax(Q)  # Find the best action
    print("The best performing ad with epsilon {} is {}".format(epsilon, chr(ord('A') + best_ad_index)))
    print("No. of times optimal ad was shown is", n_optimal_pulls)
    print("No. of times explored:", n_explored)
    print("No. of times exploited:", n_exploited)
    
    df_reward_comparison = pd.DataFrame(avg_rewards, columns=['A/B/n'])
    df_reward_comparison['A/B/n'].plot(title="A/B/n Test Avg. Reward: {:.4f}"
                                    .format(avg_reward_so_far), label = "Epsilon: {}".format(epsilon))
    plt.xlabel("Impressions")
    plt.ylabel("Avg. Reward")
    plt.xscale('log')
plt.legend()
plt.show()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp/ipykernel_31468/307031696.py[0m in [0;36m<module>[1;34m[0m
[0;32m     53[0m     [0mprint[0m[1;33m([0m[1;34m"No. of times exploited:"[0m[1;33m,[0m [0mn_exploited[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     54[0m [1;33m[0m[0m
[1;32m---> 55[1;33m     [0mdf_reward_comparison[0m [1;33m=[0m [0mpd[0m[1;33m.[0m[0mDataFrame[0m[1;33m([0m[0mavg_rewards[0m[1;33m,[0m [0mcolumns[0m[1;33m=[0m[1;33m[[0m[1;34m'A/B/n'[0m[1;33m][0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     56[0m     df_reward_comparison['A/B/n'].plot(title="A/B/n Test Avg. Reward: {:.4f}"
[0;32m     57[0m                                     .format(avg_reward_so_far), label = "Epsilon: {}".format(epsilon))

[1;31mNameError[0m: name 'pd' is not defined
NameError: name 'pd' is not defined

